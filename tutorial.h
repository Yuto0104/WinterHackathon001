//=============================================================================
//
// チュートリアルクラス(game.h)
// Author : 唐﨑結斗
// 概要 : ゲームクラスの管理を行う
//
//=============================================================================
#ifndef _TUTORIAL_H_		// このマクロ定義がされてなかったら
#define _TUTORIAL_H_		// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "scene_mode.h"

//*****************************************************************************
// 前方宣言
//*****************************************************************************
class CPlayer;
class CMesh3D;
class CMotionEnemy;

//=============================================================================
// ゲームクラス
// Author : 唐﨑結斗
// 概要 : ゲーム生成を行うクラス
//=============================================================================
class CTutorial : public CSceneMode
{
public:
	enum ETutorialMode
	{
		TUTORIAL_PUSH,
		TUTORIAL_MAX
	};

	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static void SetGame(const bool bGame) { m_bGame = bGame; }		// ゲームの状況の設定
	static CMesh3D *GetMesh() { return m_pMesh3D; }					// メッシュのゲッター

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CTutorial();
	~CTutorial() override;

	//--------------------------------------------------------------------
	// 静的メンバ変数
	//--------------------------------------------------------------------
	static CMesh3D *m_pMesh3D;						// メッシュクラス
	static D3DXCOLOR fogColor;						// フォグカラー
	static float fFogStartPos;						// フォグの開始点
	static float fFogEndPos;						// フォグの終了点
	static float fFogDensity;						// フォグの密度
	static bool m_bGame;							// ゲームの状況
	static bool m_Turorial;							// チュートリアルかどうか

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	HRESULT Init() override;					// 初期化
	void Uninit() override;						// 終了
	void Update() override;						// 更新
	void Draw() override;						// 描画

private:
	ETutorialMode m_mode;
};

#endif



